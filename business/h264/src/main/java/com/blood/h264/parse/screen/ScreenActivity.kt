package com.blood.h264.parse.screen

import android.content.Intent
import android.hardware.display.DisplayManager
import android.hardware.display.VirtualDisplay
import android.media.MediaCodec
import android.media.MediaCodecInfo
import android.media.MediaFormat
import android.media.projection.MediaProjection
import android.media.projection.MediaProjectionManager
import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import com.blood.common.Constants.MEDIA_PROJECTION_REQUEST_CODE
import com.blood.common.util.*
import com.blood.h264.databinding.ActivityScreenBinding
import java.io.File
import java.io.IOException

class ScreenActivity : AppCompatActivity() {

    companion object {
        const val TAG = "ScreenActivity"
        const val SAVE_FILE = "screen-codec.h264"
    }

    private lateinit var binding: ActivityScreenBinding
    private lateinit var mediaCodec: MediaCodec
    private lateinit var mediaProjectionManager: MediaProjectionManager
    private lateinit var mediaProjection: MediaProjection
    private lateinit var virtualDisplay: VirtualDisplay
    private var width = 1080
    private var height = 1920
    private var isRunning = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityScreenBinding.inflate(layoutInflater)
        setContentView(binding.root)
        init()
    }

    override fun onDestroy() {
        super.onDestroy()
        isRunning = false
        MediaCodecUtil.releaseMediaCodec(mediaCodec)
        MediaCodecUtil.releaseMediaProjection(mediaProjection)
        MediaCodecUtil.releaseVirtualDisplay(virtualDisplay)
    }

    private fun init() {
        FileUtil.deleteFile(File(filesDir, SAVE_FILE))
        binding.root.post {
            width = binding.root.width
            height = binding.root.height
            if (width % 2 == 1) width--
            if (height % 2 == 1) height--
            Log.i(TAG, "init: $width $height")
            mediaProjectionManager = MediaProjectionUtil.requestMediaProject(this, MEDIA_PROJECTION_REQUEST_CODE)
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        data ?: return
        if (resultCode == RESULT_OK) {
            if (requestCode == MEDIA_PROJECTION_REQUEST_CODE) {
                initMediaCodec()
                initMediaProjection(resultCode, data)
                ThreadPoolUtil.getInstance().start {
                    try {
                        process()
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                }
            }
        }
    }

    private fun initMediaCodec() {
        try {
            val mediaFormat = MediaFormat.createVideoFormat(MediaFormat.MIMETYPE_VIDEO_AVC, width, height)
            mediaFormat.setInteger(MediaFormat.KEY_FRAME_RATE, 15)
            mediaFormat.setInteger(MediaFormat.KEY_BIT_RATE, 400000)
            mediaFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 2)
            // 指定mediaCodec的数据来自于surface
            mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface)
            mediaCodec = MediaCodec.createEncoderByType(MediaFormat.MIMETYPE_VIDEO_AVC)
            mediaCodec.configure(mediaFormat, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE)
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    private fun initMediaProjection(resultCode: Int, data: Intent) {
        mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, data)
        virtualDisplay = mediaProjection.createVirtualDisplay( // 将录屏yuv数据存放到指定的surface中
                "screen-codec",
                width,
                height,
                1,
                DisplayManager.VIRTUAL_DISPLAY_FLAG_PUBLIC,
                mediaCodec.createInputSurface(), // 提供一个临时场地，mediaCodec会从该surface中解码数据
                null,
                null
        )
    }

    private fun process() {
        mediaCodec.start()
        isRunning = true
        while (isRunning) {
            // 从mediaCodec获取解码后的数据
            val bufferInfo = MediaCodec.BufferInfo()
            val outputBufferIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, 10000)
            if (outputBufferIndex > -1) {
                val byteArray = MediaCodecUtil.getOutputBufferBytes(mediaCodec, outputBufferIndex, bufferInfo)
                H264Util.writeContent(byteArray, null)
                H264Util.writeBytes(byteArray, File(filesDir, SAVE_FILE))
                // 释放 buffer
                mediaCodec.releaseOutputBuffer(outputBufferIndex, false)
            }
        }
    }

/*
0000000167640032ACB40220087F2CD2905060606D0A13500000000168EE06F2C0

0000000141E2208BFFDBD3C0007D2051A9D3EBE1EFE2F66426FE0A64EC83034B69593B602A27E98F35C006F35BAE86088E9E93311F088EB72AE9614523517DD280D3AB961D71DCD9674271E123E9F9672E0017B65C68B8ACB8F8DBB94E9815961C6D49EF28A565A32248BCE6C6EFEEBCD367A0CD4CA3FC55047D13D132FE9F0BFF47DBEC103EE825E4130CD858B96E26B7E3589723A814BBCA542B6970194786D12AF4F81D8906B478C56BCF584A10AE3746827E30C8B263CBB2DFF1A888647CBE5CABFBA1B6DD03A750CCF8892E9EA81842E00F2EBF1BD27E56993CC028A287D92A5C47BDD4EBA719C9379301631A6ECE1C1CF02E3872D532C02285B5211FC38561C12E0220BC54FAD93645305C1657B174E652AE0B3B123B3D69E8E2D4DA70C5F132A1B22C30FD43AB537A35F2A1606DF8034210D14DD129B0EDD8901F2295F29FDD9C00EC8A83BD5B7F90642391BAE0A4F5F7E3D05894DC9BA8B4A5BDA94CCE134ED820739377ED8BE7CC7FFEF8623ECBABDD0F343823366B3F66890EBAB11ADF47C11123D9379C48AFB8B27F0823C00EE26FD2D7073F0067853A90E30666B03296956B49AD9BAD766ECCC1E7F7E292C8233AF7D9FD10CB6D763FA7554474F2E426CE87B2A4B71D79132851454402BC2CF9C72B5E816647DB8401AE9EE89113FAFF5CEDBA562B90F40CC6FD751F149943F3AE10B9F1FF2810A8AA1F871E491DC2D486BC3191041E2522FA26B377476B00587AB15E4E290F40FB13C63DE28022D44E00F5D16CC177DDBC0CD7DEB1D514807FA7EC25CC5BC43B76036B651F0937A29D84A7952E9BFFA5B2CDC39CC7F52D22D7776BF23246BABE57414DEAB44FAB6A481EFD8FB537FFB93AA3A69C68B70A5754956546CE66E498E91A187752F43E3F26F79E2A3283AB5366A1A8FDF0BD536B139C791E05A3A6E6DC18E577D4E5081AD84DEF9A55852D9A93A586A425C34D3BE7FD73F9957951A76B30DEA909F0DD601A4B5CFEEA929621D18DEDAA429C38DC275937BFEAA625D57793AF6A90B30E9719FB4DF00CA9E9885E4EB7795E553A43BC3126F8005514C9CF3B675CAF2C9D32008D5CE40DF11D446C50253CAF2C9D41A62D5CE40CF12D471C6E2DFCAF2E9D49CE30B6E80A5564D779013D395E5F3AA3D069D9C823E27A94780C75395E673AA40150ADD024AAC9B37038EF1A90F30FD98E436BA04155936A6111F33522061FB37C9ED740A2AB26D1C3C4086A444C3F68B8275D030AAC9B67129081A911F55461E15D740E2AB26D284E4326A449D551B785ADD034AAC9B62141091A912B5546FE1E3740F2AB26D78544286A449D551BF888DD044AAC9B761510B1A912F5546FE22374112AB26E685442C6A44DD551BF888DD044AAC9BAE1510B1A91375546FE22374112AB26F085442C6A44DD551BF888DD044AAC9BDE1510B1A91375546FE22374112AB26FC85442C6A44DD551BF888DD044AAC9C021510B1A91375546FE22374112AB270585442C6A44DD551BF888DD044AAC9C261510B1A91375546FE22374112AB270D85442C6A44DD551BF888DD044AAC9C461510B1A91375546FE22374112AB270DE279A5AA44DD551BF888DD044AAC9C3F89E696A91375546FE22374112AB2713E279A5AA44DD551BF888DD044AAC9C5F89E696A91375546FE22374112AB2718E279A5AA44DD551BF888DD044AAC9C7389E696A91375546FE22374112AB271DE279A5AA44DD551BF888DD044AAC9C8789E696A91375546FE22374112AB2722E279A5AA44DD551BF888DD044AAC9C9789E696A91375546FE22374112AB2726E279A5AA44DD551BF888DD044AAC9CA789E696A91375546FE22374112AB272AE279A5AA44DD551BF888DD044AAC9CB789E696A91375546FE22374112AB272EE279A5AA44DD551BF888DD044AAC9CBF89E696A91375546FE22374112AB2732E279A5AA44DD551BF888DD044AAC9CCF89E696A91375546FE22374112AB2734E279A5AA44DD551BF888DD044AAC9CD389E696A913755D800000000000000
0000000141E4208BFFDBD3C0007D2051A78F8B0D1735F9A0CBB22F256379607E4D14AE8CAA21474C336D12B87EBBC9592C3DC6154F436006456E5D3AA9837D47295CD1B4165C8355C5241D611697C1B01C12A9B59BBB28322BFCBAB4699F92D9149BA63241C907F91D80DF76FAAD05CBB9951499E65C1485CC466BFFE1D323F41D903D4A1224F571D9E3FE7FED6834C4DAE960F65A328C7E2378958DE818DA9E1006B69E9BE0E61BCA75394E6565DF4732768509C7E8D83C024123A494B43453D926B844DF07BF3F2C809384D155A6C5BAEAF24A3D062FC5856A45301091BAB35A5BE40D6EB6D615286AF665C1974237088EB8A30DC8C39F01A31B0B5A48ABD66CE78F9BBC83E37BF59EF53AC96D69ED69607229684E06603D3204410A8C3CAF11B2FB04C51F5892BD0B57798683D36A09A701DE983FD7AF43573A8A8920A234B2D8C8F61BE0F10C2546AA0012797FA743C98AFA77F2A801CE5ED948604A722C64EA923AE6A5493C39651E50DC9530447DAFA34D6C3341058B0BAEF516CD4F3CE9732C2EF0F134E4E2AB1484808A8AE0D8B1F50BAD19A00A8CAD8EC9031CAA4DA32F300DA0F76DA24AA4AD374DD55DDDCD44CFC2F85357F34954D63DB12F53AF4CEC84FADD5E12C25F6CDF1167FD3B046207C6FB543F079897C2F8EB6FC8ECF81377D15159CBE6CA2D259E9FE2B6CF80DBC725178B656C508DEA949FFDB9B841C5C2BA63DDBCBA3A8ABA4D750C625E280AE45E3012E45E3512E65E4612E65E4622E75E5322E7DE4E0C67DE571067DE5F10675E5F20675E622068DE4A12E8DE5022E8DE5022E9DE5322E9DE4E2069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE542069DE54225000000000000000000000
*/

}